// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int      @id @default(autoincrement())
  email    String   @unique
  password String
  phone    String?
  role     UserRole @default(RegisteredUser)

  firstName String?
  lastName  String?

  image String? // Profile image

  Orders   Order[]
  Payments Payment[]
  // Reviews  Review[] // Relation to review system if users can rate and review service providers

  dogOwnerProfile  DogOwnerProfile?
  dogWalkerProfile DogWalkerProfile?
  Review           Review[]
  Dog              Dog[]

  @@map("users")
}

model DogOwnerProfile {
  id        Int     @id @default(autoincrement())
  userId    Int     @unique
  user      User    @relation(fields: [userId], references: [id])
  bio       String? // Bio
  // dogsOwned Int // Number of dogs owned
  dogsOwned Dog[]
  Orders    Order[]

  @@map("dogOwnerProfiles")
}

model DogWalkerProfile {
  id           Int            @id @default(autoincrement())
  userId       Int            @unique
  user         User           @relation(fields: [userId], references: [id])
  bio          String? // Bio
  experience   String? // Experience level
  availability Availability[]
  Orders       Order[]

  @@map("dogWalkerProfiles")
}

model Availability {
  id                 Int              @id @default(autoincrement())
  dogWalkerProfileId Int              @unique
  dogWalkerProfile   DogWalkerProfile @relation(fields: [dogWalkerProfileId], references: [id])
  weekday            Weekday
  startHour          Int
  endHour            Int

  @@map("availabilities")
}

enum Weekday {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

model Dog {
  id   Int    @id @default(autoincrement())
  name String

  breedId Int?
  Breed   Breed? @relation(fields: [breedId], references: [id])

  age   Int?
  image String? // Profile image

  ownerId Int
  Owner   User @relation(fields: [ownerId], references: [id])

  Orders            Order[]
  DogOwnerProfile   DogOwnerProfile? @relation(fields: [dogOwnerProfileId], references: [id])
  dogOwnerProfileId Int?

  @@map("dogs")
}

model Breed {
  id   Int    @id @default(autoincrement())
  name String
  Dog  Dog[]

  @@map("breeds")
}

// Orders are just walks by dogwalkers for dogowners
model Order {
  id                 Int               @id @default(autoincrement())
  dogId              Int
  Dog                Dog               @relation(fields: [dogId], references: [id])
  walkerId           Int
  Walker             User              @relation(fields: [walkerId], references: [id])
  date               DateTime
  Distance           Float
  Cost               Float
  stayDuration       Int // Duration of the stay or walk
  serviceType        ServiceType // Type of service requested (walk, feeding, play etc.)
  GPSCoordinates     GPS[]
  Payment            Payment?
  Tip                Float? // Optional tip from client
  // Review         Review[]
  DogOwnerProfile    DogOwnerProfile?  @relation(fields: [dogOwnerProfileId], references: [id])
  dogOwnerProfileId  Int?
  DogWalkerProfile   DogWalkerProfile? @relation(fields: [dogWalkerProfileId], references: [id])
  dogWalkerProfileId Int?
  Review             Review[]

  @@map("orders")
}

enum UserRole {
  RegisteredUser
  DogWalker
  DogOwner
}

model GPS {
  id        Int   @id @default(autoincrement())
  latitude  Float
  longitude Float
  orderId   Int
  Order     Order @relation(fields: [orderId], references: [id])

  @@map("gps")
}

model Payment {
  id      Int           @id @default(autoincrement())
  Amount  Float
  Method  PaymentMethod
  orderId Int           @unique
  Order   Order         @relation(fields: [orderId], references: [id])
  userId  Int
  User    User          @relation(fields: [userId], references: [id])

  @@map("payments")
}

enum PaymentMethod {
  GoCardless
  PayPal
  Card
  Blik
}

// The type of service requested (walk, feeding, play etc.)
enum ServiceType {
  Walking
  Feeding
  PlayEtc
}

// Ratings and reviews
model Review {
  id       Int     @id @default(autoincrement())
  rating   Int // Rating from 1-5
  review   String? // Review text
  walkerId Int
  Walker   User    @relation(fields: [walkerId], references: [id])
  orderId  Int
  Order    Order   @relation(fields: [orderId], references: [id])

  @@map("reviews")
}
