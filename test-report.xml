<?xml version="1.0" encoding="UTF-8"?>
<testExecutions version="1">
    <file path="C:\projekty\doggo-server\src\user\services\user.service.spec.ts">
        <testCase name="UserService should be defined" duration="19"/>
        <testCase name="UserService createUser should encrypt password before saving" duration="8"/>
        <testCase name="UserService createUser should save user with encrypted password" duration="7"/>
        <testCase name="UserService createUser should return serialized user" duration="6"/>
        <testCase name="UserService findById should find user from DB using given id" duration="5"/>
        <testCase name="UserService findById should return serialized user" duration="4"/>
        <testCase name="UserService getUserById should find user from DB using given id" duration="3"/>
        <testCase name="UserService getUserById should return serialized user" duration="5"/>
        <testCase name="UserService getUserById throw not found exception if user is not found" duration="4"/>
        <testCase name="UserService validateUsernamePassword should fail when username is invalid" duration="26"/>
        <testCase name="UserService validateUsernamePassword should fail when password is invalid" duration="4"/>
        <testCase name="UserService validateUsernamePassword should return  user  when credentials are valid"
                  duration="3"/>
        <testCase name="UserService getUsers gets users as a list" duration="4"/>
        <testCase name="UserService findByUsername should find user from DB using given username" duration="5"/>
        <testCase name="UserService findByUsername should return serialized user" duration="3"/>
        <testCase name="UserService updateUser should call repository.save with correct input" duration="2"/>
        <testCase name="UserService updateUser should throw not found exception if user not found" duration="4"/>
    </file>
    <file path="C:\projekty\doggo-server\src\article\services\article.service.spec.ts">
        <testCase name="ArticleService should be defined" duration="28"/>
        <testCase name="ArticleService Create Article should get user from user claims user id" duration="10"/>
        <testCase
                name="ArticleService Create Article should call repository save with proper article input and return proper output"
                duration="10"/>
        <testCase name="ArticleService getArticles should return articles when found" duration="10"/>
        <testCase name="ArticleService getArticles should return empty array when articles are not found" duration="9"/>
        <testCase name="ArticleService getArticle should return article by id when article is found" duration="11"/>
        <testCase name="ArticleService getArticle should fail when article is not found and return the repository error"
                  duration="10"/>
        <testCase name="ArticleService Update Article should get article by id" duration="8"/>
        <testCase name="ArticleService Update Article should save article with updated title and post" duration="9"/>
        <testCase
                name="ArticleService Update Article should throw unauthorized exception when someone other than resource owner tries to update article"
                duration="6"/>
        <testCase name="ArticleService deleteArticle should call repository.remove with correct parameter"
                  duration="4"/>
        <testCase name="ArticleService deleteArticle should throw not found exception if article not found"
                  duration="6"/>
        <testCase
                name="ArticleService deleteArticle should throw unauthorized exception when someone other than resource owner tries to delete article"
                duration="6"/>
    </file>
    <file path="C:\projekty\doggo-server\src\auth\services\auth.service.spec.ts">
        <testCase name="AuthService should be defined" duration="16"/>
        <testCase name="AuthService validateUser should success when username/password valid" duration="5"/>
        <testCase name="AuthService validateUser should fail when username/password invalid" duration="17"/>
        <testCase name="AuthService validateUser should fail when user account is disabled" duration="3"/>
        <testCase name="AuthService login should return auth token for valid user" duration="4"/>
        <testCase name="AuthService register should register new user" duration="9"/>
        <testCase name="AuthService refreshToken should generate auth token" duration="4"/>
        <testCase name="AuthService refreshToken should throw exception when user is not valid" duration="2"/>
        <testCase name="AuthService getAuthToken should generate access token with payload" duration="6"/>
        <testCase name="AuthService getAuthToken should generate refresh token with subject" duration="2"/>
    </file>
    <file path="C:\projekty\doggo-server\src\shared\filters\all-exceptions.filter.spec.ts">
        <testCase name="AllExceptionsFilter should be defined" duration="14"/>
        <testCase name="AllExceptionsFilter should handle both HttpException and unhandled Error" duration="16"/>
        <testCase name="AllExceptionsFilter should handle HttpException with right status code" duration="4"/>
        <testCase name="AllExceptionsFilter should handle unhandled error with status code 500" duration="4"/>
        <testCase name="AllExceptionsFilter should handle exception with plain string message" duration="4"/>
        <testCase name="AllExceptionsFilter should handle exception with object type message" duration="9"/>
        <testCase name="AllExceptionsFilter should respond with Error message in development mode" duration="6"/>
        <testCase name="AllExceptionsFilter should suppress Error message in production mode" duration="12"/>
        <testCase name="AllExceptionsFilter should contain request id in response" duration="6"/>
        <testCase name="AllExceptionsFilter should contain request path in response" duration="5"/>
        <testCase name="AllExceptionsFilter should contain timestamp in response" duration="4"/>
    </file>
    <file path="C:\projekty\doggo-server\src\article\controllers\article.controller.spec.ts">
        <testCase name="ArticleController should be defined" duration="26"/>
        <testCase name="ArticleController Create article should call articleService.createArticle with correct input"
                  duration="7"/>
        <testCase
                name="ArticleController Create article should return data which includes info from articleService.createArticle"
                duration="6"/>
        <testCase
                name="ArticleController Create article should throw error when articleService.createArticle throws an error"
                duration="7"/>
        <testCase name="ArticleController Get articles should call service method getArticles" duration="8"/>
        <testCase name="ArticleController Get article by id should call service method getArticleById with id"
                  duration="5"/>
        <testCase
                name="ArticleController Update article should call articleService.updateArticle with correct parameters"
                duration="5"/>
        <testCase name="ArticleController Delete article should call articleService.deleteArticle with correct id"
                  duration="4"/>
    </file>
    <file path="C:\projekty\doggo-server\src\shared\acl\acl.service.spec.ts">
        <testCase name="AclService should be defined" duration="20"/>
        <testCase name="AclService canDo should add acl rule" duration="5"/>
        <testCase name="AclService canDo should add acl rule with custom rule" duration="5"/>
        <testCase name="AclService forActor should return canDoAction method" duration="7"/>
        <testCase name="AclService forActor should return false when no role sepcific rules found" duration="6"/>
        <testCase name="AclService forActor should return false when no action sepcific rules found" duration="3"/>
        <testCase name="AclService forActor should return true when role has action permission" duration="4"/>
        <testCase name="AclService forActor should return true when ruleCallback is true" duration="4"/>
        <testCase name="AclService forActor should return false when ruleCallback is false" duration="6"/>
    </file>
    <file path="C:\projekty\doggo-server\src\auth\controllers\auth.controller.spec.ts">
        <testCase name="AuthController should be defined" duration="31"/>
        <testCase name="AuthController registerLocal should register new user" duration="7"/>
        <testCase name="AuthController login should login user" duration="5"/>
        <testCase name="AuthController refreshToken should generate refresh token" duration="5"/>
    </file>
    <file path="C:\projekty\doggo-server\src\user\controllers\user.controller.spec.ts">
        <testCase name="UserController should be defined" duration="16"/>
        <testCase name="UserController get Users as a list Calls getUsers function" duration="5"/>
        <testCase name="UserController Get user by id should call service method getUserById with id" duration="4"/>
        <testCase name="UserController Update user by id Update user by id and returns user" duration="5"/>
    </file>
    <file path="C:\projekty\doggo-server\src\user\services\user-acl.service.spec.ts">
        <testCase name="UserAclService should be defined" duration="14"/>
        <testCase
                name="UserAclService for admin user should allow admin user to create, read, update, delete, list user"
                duration="4"/>
        <testCase name="UserAclService for admin user should allow admin to read, update, delete any user"
                  duration="4"/>
        <testCase name="UserAclService for user role should allow user to read, update himself" duration="2"/>
        <testCase name="UserAclService for user role should not allow user to delete himself" duration="3"/>
        <testCase name="UserAclService for user role should allow user to read other user" duration="2"/>
        <testCase name="UserAclService for user role should not allow user to update, delete other user" duration="3"/>
    </file>
    <file path="C:\projekty\doggo-server\src\user\repositories\user.repository.spec.ts">
        <testCase name="UserRepository should be defined" duration="19"/>
        <testCase name="UserRepository Get user by id should call findOne with correct id" duration="8"/>
        <testCase name="UserRepository Get user by id should return user if found" duration="4"/>
        <testCase name="UserRepository Get user by id should throw NotFoundError when user not found" duration="3"/>
    </file>
    <file path="C:\projekty\doggo-server\src\article\repositories\article.repository.spec.ts">
        <testCase name="ArticleRepository should be defined" duration="14"/>
        <testCase name="ArticleRepository Get article by id should call findOne with correct id" duration="8"/>
        <testCase name="ArticleRepository Get article by id should return article if found" duration="6"/>
        <testCase name="ArticleRepository Get article by id should throw NotFoundError when article not found"
                  duration="5"/>
    </file>
    <file path="C:\projekty\doggo-server\src\shared\interceptors\logging.interceptor.spec.ts">
        <testCase name="LoggingInterceptor should be defined" duration="17"/>
        <testCase name="LoggingInterceptor intercept intercept" duration="4"/>
    </file>
    <file path="C:\projekty\doggo-server\src\shared\request-context\util\index.spec.ts">
        <testCase name="createRequestContext function should return RequestContext" duration="8"/>
    </file>
    <file path="C:\projekty\doggo-server\src\app.controller.spec.ts">
        <testCase name="AppController getHello should return &quot;Hello World!&quot;" duration="26"/>
    </file>
    <file path="C:\projekty\doggo-server\src\app.service.spec.ts">
        <testCase name="AppService should be defined" duration="35"/>
        <testCase name="AppService getHello should return Hello World" duration="8"/>
    </file>
    <file path="C:\projekty\doggo-server\src\shared\logger\logger.service.spec.ts">
        <testCase name="AppLogger should be defined" duration="8"/>
    </file>
</testExecutions>